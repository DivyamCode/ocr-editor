#include <simplecpp>

main_program{
int nsides;
cout << "Type in the number of sides: ";
cin >> nsides;

turtleSim();

repeat (nsides){

forward (50) ;

left (360.0/nsides);
}
wait (5);

This program has a number of new ideas. The first statement in the main program is int
nsides; which does several things. The first word int is short for “integer”, and it asks that a
region be reserved in memory in which integer values will be stored during execution. Second, it
gives the name nsides to the region and stipulates that from now on, whenever the programmer
uses the name nsides it should be considered to refer to this region. It is customary to say that
nsides is a variable, whose value is stored in the associated region of memory. This statement is
said to define the variable nsides. As many variables as you want can be defined, either by giving
separate definition statements, or by writing out the names with commas in between. For example,
int nsides, length; would define two variables, the first called nsides, the second length. We
will learn more about names and variables in Chapter ?7.

The next new statement is relatively simple. cout is a name that refers to the computer screen.
It is customary to pronounce the c in cout (and cin in the next statement) as “see”. The sequence
of characters << denotes the operation of writing something on the screen. What gets written is to
be specified after the <<. So the statement in our program will display the message

Type in the number of sides:

on the screen. Of course, you may put in a different message in your program, and that will get
displayed.

In the statement after that, cin >> nsides;, the name cin refers to the keyboard. It asks the
computer to wait until the user types in something from the keyboard, and whatever is typed is
placed into the (region associated with the) variable nsides. The user must type in an integer value
and then press the return (sometimes called “Enter”) key. The value typed in gets placed in nsides.

You may wish to note that the >> and << operators are suggestive of the direction in which
information flows.

After the cin >> nsides; statement is executed, the computer executes the repeat statement.
Executing a repeat statement is nothing but executing its body as many times as specified. In this
case, the computer is asked to execute the body nsides times. So if the user had typed in 15 in
response to the message asking for the number of sides to be typed, then the variable nsides would
have got the value 15, and the loop body would be executed 15 times. The loop body consists of
the two statements forward (100) and left (360.0/nsides). Notice that instead of directly giving
the number of degrees to turn, we have given an expression. This is allowed! The computer will
evaluate the expression, and use that value. Thus in this case the computer will divide 360.0 by the
value of the variable nsides, and the result is the turning angle. Thus, if nsides is 15, the turning
angle will be 24. So it should be clear that in this case a 15 sided polygon would be drawn.

ot
