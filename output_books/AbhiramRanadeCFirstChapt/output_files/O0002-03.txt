After this the line wait (5) causes the program to do nothing for 5 seconds. This is the time you
have to admire the work of the turtle! After executing this line, the program halts.

Perhaps you are puzzled by the () following the command turtleSim. The explanation is
simple. A command in C++ will typically require additional information to do its work, e.g. for
the forward command, you need to specify a number denoting how far to move. It just so happens
that turtleSim can do its work without additional information. Hence we need to simply write ().
Later you will see that there can be commands which will need more than one pieces of information,
in this case we simply put the pieces inside () separated by commas.

1.1 Executing the program

To execute this program, we must first have it in a file on your computer. It is customary to use the
suffix . cpp for files containing C++ programs. So let us suppose you have typed the program into
a file called square .cpp â€” you can also get the file from the Simplecpp package.

Next, we must compile the file, i.e. translate it into a form which the computer understands more
directly and can execute. The translation is done by the command s++ which got installed when you
installed the package Simplecpp. The command s++ merely invokes an appropriate complier e.g.
the GNU C++ compiler (See Appendix ??). In a UNIX shell you can compile a file by typing s++
followed by the name of the file. In this case you would type s++ square.cpp. As a result of this
another file is produced, which contains the program in a form that is ready to execute. On UNIX,
this file is typically called a.out. This file can be executed by typing its name to the shell

% a.out

You may be required to type ./a.out because of some quirks of UNIX. Or you may be able to
execute by double clicking its icon. When the program is thus executed, you should see a window
come up, with the turtle which then draws the square.

Appendix 7? discusses how the compiler is to be invoked and how to execute the compiled
program on systems besides UNIX.

2 Remarks

A C++ program is similar in many ways to a paragraph written in English. A paragraph consists of
sentences separated by full stops; a C++ program contains commands which must be separated by
semi-colons. Note that while most human beings will tolerate writing in which a full-stop is missed,
a computer is very fastidious, each command must be followed by a semi-colon. Note however, that
the computer is more forgiving about the use of spaces and line breaks. It is acceptable to put in
spaces and linebreaks almost anywhere so long as words or numbers are not split or joined. Thus it
is perfectly legal (though not recommended!) to write

turtleSim() ;forward (100) 7
left (90
);

if you wish. This flexibility is meant to enable you to write such that the program is easy to
understand. Indeed, we have put empty lines in the program so as to help ourselves while reading it.
Thus the commands which actually draw the square are separated from other commands. Another
important idea is to indent, i.e. put leading spaces before lines that are part of main program. This
is again done to make it visually apparent what is a part of the main program and what is not. As
you might observe, indentation is also used in ordinary writing in English.
