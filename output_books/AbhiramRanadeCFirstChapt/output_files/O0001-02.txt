1 A simple program
Our first example program is given below.

#include <simplecpp>
main_program{
turtleSim() ;

forward (100) ;
left (90);
forward (100) ;
left (90);
forward (100) ;
left (90);
forward (100) ;

wait (5);

If you execute this program on your computer, it will first open a window. Then a small triangle
which we call a turtlÂ®| will appear in the window. Then the turtle will move and draw a square as
it moves. After that, the window will vanish, and the program will end. First we will tell you why
the program does all that it does. Then we will tell you how to execute the program.

The first line #include <simplecpp> declares that the program makes use of the Simplecpp
package, in addition to what is provided by the C++ programming language.

The next line, main program{, says that what follows is the main program[7] The main program
itself is contained in the braces { } following the text main program.

The line following that, turtleSim() ; causes a window with a triangle at its center to be opened
on the screen. The triangle represents our turtle, and the screen the ground on which it can move.
Initially, the turtle points in the East direction. The turtle is equipped with a pen, which can either
be raised or lowered to touch the ground. If the pen is lowered, then it draws on the ground as the
turtle moves. Initially, the pen of the turtle is in the lowered state, and it is ready to draw.

The next line forward (100) causes the turtle to move forward by the amount given in the
parentheses, (). The amount is to be given in pizels. As you might perhaps know, your screen is
really an array of small dots, each of which can take on any colour. Typical screens have an array
of about 1000 x 1000 dots. Each dot is called a pixel. So the command forward (100) causes the
turtle to go forward in the current direction it is pointing by about a tenth of the screen size. Since
the pen was down, this causes a line to be drawn.

The command left (90) causes the turtle to turn left by 90 degrees. Other numbers could also
be specified instead of 90. After this, the next command is forward (100), which causes the turtle to
move forward by 100 pixels. Since the turtle is facing north this time, the line is drawn northward.
This completes the second side of the square. The next left (90) command causes the turtle to turn
again. The following forward (100) draws the third side. Then the turtle turns once more because
of the third 1eft(90) command, and the fourth forward(100) finally draws the fourth side and
completes the square.

20ur turtle is meant to mimic the turtle in the Logo programming language.
3Yes, there can be non-main programs too, as you will see later. Also note that the phrase main program is provided
by Simplecpp. Specifying the main program is a bit more complex if you use bare C++; we will see this in Section ??.
