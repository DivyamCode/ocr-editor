cin >> nj;
cout << n*n*n << endl;

}

After cout << we are expected to place what we want printed. Here we have written n*n*n which
causes the cube of n to be calculated and then printed. Instead of n*n*n we could have written
whatever mathematical expression we want. We discuss the exact rules later, in Section 77.

8 Concluding Remarks

Although it may not seem like it, in this chapter you have already learned a lot.

First, you have some idea of what a computer program is and how it executes: starting at the
top and moving down one statement at a time going towards the bottom. If there are repeat
statements, the program executes the body of the loop several times; the program is said to loop
through the body for the required number of iterations.

You have learned the notion of a variable, i.e. a region of memory into which you can store a
value, which can later be used while performing computations.

You have also learned several commands using which you can draw, do calculations (e.g. take
square root).

You have also seen the notion of generalization: the polygon drawing program we wrote in Sec-
is a generalization of the square drawing program of Section Generalization is very
important; usually you will write programs which will not do just one fixed task, but behave differ-
ently depending upon the input given by the user. For this you need to be able to understand the
principle behind whatever it is that you are doing, and express it in a general form as we did in the
polygon drawing program.

A very important point concerns observing the patterns in whatever you are doing. When we
draw a polygon, we repeat the same action several times. This is a pattern that we can mirror in
our program by using the repeat statement. By using a repeat statement we can keep our program
compact; indeed we may be drawing a polygon with 100 sides, but our program only has a few
statements. You will see other ways of capturing patterns in your programs later. In general this is
a very important idea.

Last but not the least, it is worth noting that we have tried to make our programs look good
and be easy to understand. The main reason for this is that when we write programs, they will not
only be executed on a computer, but will also be read by other programmers who must understand
what we mean. We used indentation and comments for making our program more understandable.
Later on in the book we will see other ways.

At this point you should also see why the notation used to write programs is called a language.
A natural language (e.g. English) is very flexible and general. It has a grammatical structure, e.g.
there is a subject, verb, and object; or there can be clauses, which can themselves contain subjects,
verbs, objects and other clauses. This organization is also present in programming languages; for
example, you have already seen that a repeat statement can contain another repeat statement inside.
There are also rules of punctuation, e.g. each statement of C++ must end with a semicolon, just as
each sentence in the English language ends with a full stops. These grammatical and punctuation
rules are often denoted by the term syntax. This term is also used in programming.

Our treatment of the C++ programming language will be somewhat similar to how you might
be taught a new natural language, say Marathi or French. We will teach you the grammar, or the
syntax, but that will be just one aspect. In order to be able to speak or write a language well, you
must not only know the grammar and the vocabulary, but also know how to organize your thoughts

 
